(ns klondike.waste-pile
  (:require ["package:flame/input.dart" :as input :refer [Vector2]]
            ["package:flame/components.dart" :as components :refer [PositionComponent Anchor]]
            [klondike.card :as card]
            [klondike.protocol :refer [IPile acquire-card remove-all-cards
                                       ICanMoveCard can-move-card
                                       ICanAcceptCard can-accept-card
                                       IRemoveCard remove-card
                                       IReturnCard return-card]]))

(defprotocol IWastePile
  (fan-out-top-cards [this]))

(deftype ^:type-only WastePile [^:mutable data]
  :extends (PositionComponent)

  IWastePile
  (fan-out-top-cards [this]
    (let [{:keys [cards]} data
          qty (count cards)
          fan-offset (Vector2 (* card/card-width 0.2) 0)]
      #_(println cards)
      (doseq [card cards]
        (set! (.-position card) (.-position this)))
      (cond
        (== qty 2) (.add (.-position ^card/Card (second cards)) fan-offset)
        (>= qty 3) (let [cards (reverse cards)]
                     (.add (.-position ^card/Card (second cards)) fan-offset)
                     (.addScaled (.-position ^card/Card (first cards)) fan-offset 2)))))
  IPile
  (acquire-card
    [this ^card/Card card]
    (assert (-> card .-data :face-up?))
    (let [data (.-data this)]
      (doto card
        (-> .-position (set! (.-position this)))
        (-> .-priority (set! (count (:cards data)))))
      (set! (.-data this) (update data :cards conj card))
      (fan-out-top-cards this)
      (doto card (-> .-data (set! (assoc (.-data card) :pile this))))))

  (remove-all-cards
    [this]
    (let [cards (-> (:cards data)
                    reverse)]
      (set! (.-data this) (assoc data :cards []))
      cards))

  ICanMoveCard
  (can-move-card
    [this card]
    (let [cards (:cards data)]
      (and (seq cards)
           (= (last cards) card))))

  ICanAcceptCard
  (can-accept-card
    [this card]
    false)

  IRemoveCard
  (remove-card
    [this card]
    (assert (can-move-card this card))
    (println (-> this .-data :cards))
    (doto this
      (-> .-data (set! (update data :cards #(->> % drop-last (into []))))))
    (println (-> this .-data :cards))
    (fan-out-top-cards this)
    (println (-> this .-data :cards)))

  IReturnCard
  (return-card
    [this card]
    (doto card
      (-> .-priority (set! (.indexOf (:cards data) card))))
    (fan-out-top-cards this)))



(defn ->WastePile
  ([] (->WastePile {}))
  ([{:keys [cards debug-mode?] :as data}]
   (doto (WastePile data)
     (-> .-size (set! card/card-size))
     (-> .-position (set! (Vector2 (+ card/card-width
                                      (* card/card-gap 2))
                                   card/card-gap)))
     (-> .-debugMode (set! (or debug-mode? false))))))
