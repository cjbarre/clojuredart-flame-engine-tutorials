(ns acme.main
  (:require ["package:flutter/material.dart" :as m]
            ["package:flutter/widgets.dart" :as fw]
            ["dart:ui" :refer [Color]]
            ["package:flame/flame.dart" :as flame]
            ["package:flame/game.dart" :as game]
            ["package:flame/experimental.dart" :refer [World CameraComponent Viewfinder]]
            ["package:flame/components.dart" :as components :refer [PositionComponent Anchor CircleComponent Sprite]]
            ["package:flame/input.dart" :as input :refer [Vector2]]
            [cljd.flutter.alpha2 :refer [widget run]]))

(def card-width 1000.0)
(def card-height 1400.0)
(def card-gap 175.0)
(def card-radius 100.0)
(def card-size (Vector2 card-width card-height))

(deftype Stock [args]
  :extends (PositionComponent .size (:size args) .position (:position args))
  (^:getter debugMode [_] true))

(deftype Foundation [args]
  :extends (PositionComponent .size (:size args) .position (:position args))
  (^:getter debugMode [_] true))

(deftype Pile [args]
  :extends (PositionComponent .size (:size args) .position (:position args))
  (^:getter debugMode [_] true))

(deftype Waste [args]
  :extends (PositionComponent .size (:size args) .position (:position args))
  (^:getter debugMode [_] true))

(def klondike-sprite-name "klondike-sprites.png")

(defn klondike-sprite 
  [^double x ^double y ^double width ^double height]
  (Sprite (.fromCache (. flame/Flame images) klondike-sprite-name)
          .srcPosition (Vector2 x y)
          .srcSize (Vector2 width height)))

(deftype KlondikeGame []
  :extends game/FlameGame
  (^:async onLoad [this]
    (await (.load (. flame/Flame images) klondike-sprite-name))
    (let [stock (Stock {:size card-size :position (Vector2 card-gap card-gap)})
          waste (Waste {:size card-size :position (Vector2 (+ card-width (* card-gap 2)) card-gap)})
          foundations (mapv #(Foundation {:size card-size
                                          :position (Vector2 (+ (* (+ % 3) (+ card-width card-gap)) card-gap) card-gap)})
                            (range 5))
          piles (mapv #(Pile {:size card-size :position (Vector2 (+ card-gap (* % (+ card-width card-gap)))
                                                                 (+ card-height (* 2 card-gap)))})
                      (range 8))
          world (World)
          view-finder (Viewfinder)
          camera (CameraComponent .world world)
          _ (set! (.visibleGameSize (.-viewfinder camera)) (Vector2 (/ (+ (* card-width 7) (* card-gap 8)) 2) (+ (* 4 card-height) (* 3 card-gap))))
          _ (set! (.position (.-viewfinder camera) ) (Vector2 (+ (* card-width 3.5) (* card-gap 4)) 0))
          _ (set! (.anchor (.-viewfinder camera) ) Anchor/topCenter)]
      (await (.add world stock))
      (await (.add world waste))
      (await (.addAll world foundations))
      (await (.addAll world piles))
      (await (.add this world))
      (await (.add this camera)))
    nil))

(defn main []
  (fw/WidgetsFlutterBinding.ensureInitialized)
  (.fullScreen (. flame/Flame device))
  (let [game (KlondikeGame)] 
    (run (game/GameWidget .game game))))
