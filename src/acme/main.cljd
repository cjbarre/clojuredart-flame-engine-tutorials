(ns acme.main
  (:require ["package:flutter/material.dart" :as m]
            ["package:flutter/widgets.dart" :as fw]
            ["package:flame/flame.dart" :as flame]
            ["package:flame/game.dart" :as game]
            ["package:flame/experimental.dart" :refer [World CameraComponent]]
            ["package:flame/components.dart" :as components :refer [PositionComponent Anchor Sprite Component]]
            ["package:flame/input.dart" :as input :refer [Vector2]]
            ["dart:developer" :as dev]
            ["dart:ui" :refer [Color Paint PaintingStyle ColorFilter BlendMode RRect Radius Canvas Rect]]
            [cljd.flutter.alpha2 :refer [widget run]]))

(defn c [component] (:component component))

(defn cs [components] (mapv :component components))

(defonce db (atom {:id 0}))

(def debug-mode? true)

(defn id
  [db]
  (let [id (:id db)]
    (swap! db update :id inc)
    id))

(def klondike-sprite-name "klondike-sprites.png")

(defn klondike-sprite
  [{:keys [^double x ^double y ^double w ^double h]}]
  (Sprite (.fromCache (. flame/Flame images) klondike-sprite-name)
          .srcPosition (Vector2 x y)
          .srcSize (Vector2 w h)))

;;;;;;;;;;;;;;
;;;; Suits ;;;
;;;;;;;;;;;;;;

(defn suit
  [value label color sprite-coord]
  {:value value
   :label label
   :color color
   :sprite (klondike-sprite sprite-coord)})

(defonce suits
  {0 (suit 0 "♥" :red {:x 1176 :y 17 :w 172 :h 183})
   1 (suit 1 "♦" :red {:x 1176 :y 17 :w 172 :h 183})
   2 (suit 2 "♣" :black {:x 1176 :y 17 :w 172 :h 183})
   3 (suit 3 "♠" :black {:x 1176 :y 17 :w 172 :h 183})})

;;;;;;;;;;;;;;
;;;; Ranks ;;;
;;;;;;;;;;;;;;

(defn rank
  [value label red-sprite-coord black-sprite-coord]
  {:value value
   :label label
   :red-sprite (klondike-sprite red-sprite-coord)
   :black-sprite (klondike-sprite black-sprite-coord)})

(defonce ranks
  {1 (rank 1 "A" {:x 335 :y 164 :w 120 :h 129} {:x 789 :y 161 :w 120 :h 129})
   2 (rank 2 "2" {:x 20 :y 19 :w 83 :h 125} {:x 15 :y 322 :w 83 :h 125})
   3 (rank 3 "3" {:x 122 :y 19 :w 80 :h 127} {:x 117 :y 322 :w 80 :h 127})
   4 (rank 4 "4" {:x 213 :y 12 :w 93 :h 132} {:x 208 :y 315 :w 93 :h 132})
   5 (rank 5 "5" {:x 314 :y 21 :w 85 :h 125} {:x 309 :y 324 :w 85 :h 125})
   6 (rank 6 "6" {:x 419 :y 17 :w 84 :h 129} {:x 414 :y 320 :w 84 :h 129})
   7 (rank 7 "7" {:x 509 :y 21 :w 92 :h 128} {:x 505 :y 324 :w 92 :h 128})
   8 (rank 8 "8" {:x 612 :y 19 :w 78 :h 127} {:x 607 :y 322 :w 78 :h 127})
   9 (rank 9 "9" {:x 709 :y 19 :w 84 :h 130} {:x 704 :y 322 :w 84 :h 130})
   10 (rank 10 "10" {:x 810 :y 20 :w 137 :h 127} {:x 805 :y 322 :w 137 :h 127})
   11 (rank 11 "J" {:x 15 :y 170 :w 56 :h 126} {:x 469 :y 167 :w 56 :h 126})
   12 (rank 12 "Q" {:x 92 :y 168 :w 132 :h 128} {:x 547 :y 165 :w 132 :h 128})
   13 (rank 13 "K" {:x 243 :y 170 :w 92 :h 123} {:x 696 :y 167 :w 92 :h 123})})

;;;;;;;;;;;;;;
;;;; Card ;;;;
;;;;;;;;;;;;;;

(def card-width 1000.0)
(def card-height 1400.0)
(def card-gap 175.0)
(def card-radius 100.0)
(def card-size (Vector2 card-width card-height))

(defn flip
  [card]
  (update card :face-up? not))

(def front-background-paint
  (doto (Paint)
        (-> .-color (set! (Color 0xff000000)))))

(def back-background-paint
  (doto (Paint)
    (-> .-color (set! (Color 0xff380c02)))))

(def back-border-paint-1
  (doto (Paint)
    (-> .-color (set! (Color 0xffdbaf58)))
    (-> .-style PaintingStyle/stroke)
    (-> .-strokeWidth (set! 10))))

(def back-border-paint-2
  (doto (Paint)
    (-> .-color (set! (Color 0x5CEF971B)))
    (-> .-style PaintingStyle/stroke)
    (-> .-strokeWidth (set! 35))))

(def card-rrect
  (RRect.fromRectAndRadius
   (Rect.fromLTWH 0.0 0.0 (.-x ^Vector2 card-size) (.-y ^Vector2 card-size))
   (Radius.circular card-radius)))

(def back-rrect-inner 
  (.deflate ^RRect card-rrect 40.0))

(def flame-sprite 
  (klondike-sprite {:x 1367 :y 6 :w 357 :h 501}))

(def red-border-paint
  (doto (Paint)
        (-> .-color (set! (Color 0xffece8a3)))
        (-> .-style PaintingStyle/stroke)
        (-> .-strokeWidth (set! 10))))

(def black-border-paint
  (doto (Paint)
    (-> .-color (set! (Color 0xff7ab2e8)))
    (-> .-style PaintingStyle/stroke)
    (-> .-strokeWidth (set! 10))))

(def red-jack 
  (klondike-sprite {:x 81 :y 565 :w 562 :h 488}))

(def red-queen
  (klondike-sprite {:x 717 :y 541 :w 486 :h 515}))

(def red-king
  (klondike-sprite {:x 1305 :y 532 :w 407 :h 549}))

(def blue-filter
  (doto (Paint)
        (-> .-colorFilter (set! (ColorFilter.mode (Color 0x880d8bff) BlendMode/srcATop)))))

(def black-jack
  (doto (klondike-sprite {:x 81 :y 565 :w 562 :h 488})
        (-> .-paint (set! blue-filter))))

(def black-queen
  (doto (klondike-sprite {:x 717 :y 541 :w 486 :h 515})
        (-> .-paint (set! blue-filter))))

(def black-king
  (doto (klondike-sprite {:x 1305 :y 532 :w 407 :h 549})
        (-> .-paint (set! blue-filter))))

(defn render-front [canvas])

(defn render-back 
  [^Canvas canvas]
  (.drawRRect canvas card-rrect back-background-paint)
  (.drawRRect canvas card-rrect back-border-paint-1)
  (.drawRRect canvas back-rrect-inner back-border-paint-2)
  (.render ^Sprite flame-sprite canvas .position (. ^Vector2 card-size "/" 2.0) .anchor Anchor/center))

(defn card
  [{:keys [rank suit face-up?]}]
  {:kind :card
   :face-up? face-up?
   :component (let [component (reify :extends PositionComponent
                                (render
                                 [_ canvas]
                                 (if face-up?
                                   (render-front canvas)
                                   (render-back canvas)))
                                (toString
                                 [_]
                                 (str (:label rank) (:label suit))))]
                (doto component
                 (-> .-size (set! card-size))))})

(defn cards
  [{:keys [columns rows]}]
  (for [i (range columns)
        j (range rows)]
    (let [card (card {:rank (get ranks 1) :suit (get suits 0) :face-up? false})]
      (doto (c card)
        (-> .-position (set! (Vector2 (+ 100 (* i 1150)) (+ 100 (* j 1500))))))
      card)))

;;;;;;;;;;;;;;;
;;;; Board ;;;;
;;;;;;;;;;;;;;;

(defn stock
  ([] (stock {}))
  ([_]
   {:kind :stock
    :component (doto (PositionComponent)
                 (-> .-size (set! card-size))
                 (-> .-position (set! (Vector2 card-gap card-gap)))
                 (-> .-debugMode (set! debug-mode?)))}))

(defn foundation
  ([] (foundation {:i 0}))
  ([{:keys [i]}]
   {:kind :foundation
    :component (doto (PositionComponent)
                 (-> .-size (set! card-size))
                 (-> .-position (set! (Vector2 (+ (* (+ i 3)
                                                     (+ card-width card-gap))
                                                  card-gap) card-gap)))
                 (-> .-debugMode (set! debug-mode?)))}))

(defn pile
  ([] (pile {:i 0}))
  ([{:keys [i]}]
   {:kind :pile
    :component (doto (PositionComponent)
                 (-> .-size (set! card-size))
                 (-> .-position (set! (Vector2 (+ card-gap
                                                  (* i
                                                     (+ card-width card-gap)))
                                               (+ card-height
                                                  (* 2 card-gap)))))
                 (-> .-debugMode (set! debug-mode?)))}))

(defn waste
  ([] (waste {}))
  ([_]
   {:kind :waste
    :component (doto (PositionComponent)
                 (-> .-size (set! card-size))
                 (-> .-position (set! (Vector2 (+ card-width
                                                  (* card-gap 2))
                                               card-gap)))
                 (-> .-debugMode (set! debug-mode?)))}))

(defn world
  ([] (world {}))
  ([_]
   {:kind :world
    :component (World)}))

(defn camera
  [{:keys [world]}]
  {:kind :camera
   :component (doto (CameraComponent .world (c world))
                (-> .-viewfinder .-visibleGameSize (set! (Vector2 (+ (* card-width 7)
                                                                     (* card-gap 8))
                                                                  (+ (* 4 card-height)
                                                                     (* 3 card-gap)))))
                (-> .-viewfinder .-position (set! (Vector2 (+ (* card-width 3.5)
                                                              (* card-gap 4))
                                                           0)))
                (-> .-viewfinder .-anchor (set! Anchor/topCenter)))})

(deftype KlondikeGame [db]
  :extends game/FlameGame
  (^:async onLoad [this]
    (await (.load (. flame/Flame images) klondike-sprite-name))
    (let [stock (stock)
          waste (waste)
          foundations (mapv #(foundation {:i %}) (range 5))
          piles (mapv #(pile {:i %}) (range 8))
          cards (cards {:columns 7 :rows 4})
          _ (prn (str (count cards)))
          world (world)
          camera (camera {:world world})
          components (concat (cs [stock waste])
                             (cs foundations)
                             (cs piles)
                             (cs cards))]
      (await (.addAll ^World (c world) components))
      (await (.addAll this (cs [world camera]))))
    nil))

(defn main []
  (fw/WidgetsFlutterBinding.ensureInitialized)
  (prn "hello")
  (let [game (KlondikeGame db)]
    (m/runApp (game/GameWidget .game game))))
