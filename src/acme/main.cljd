(ns acme.main
  (:require ["package:flutter/material.dart" :as m]
            ["package:flutter/widgets.dart" :as fw]
            ["package:flame/flame.dart" :as flame]
            ["package:flame/game.dart" :as game]
            ["package:flame/camera.dart" :as camera :refer [World CameraComponent]] 
            ["package:flame/components.dart" :as components :refer [PositionComponent Anchor]]
            ["package:flame/input.dart" :as input :refer [Vector2]]
            ["dart:ui" :refer [Color Paint PaintingStyle RRect Canvas Rect Offset]]
            [acme.card :as card]
            [acme.sprite :as sprite]
            [acme.protocol :refer [IPile acquire-card]]
            [acme.stock-pile :refer [->StockPile]]
            [acme.foundation-pile :refer [->Foundation]]))

(defonce db
  (atom {:id 0}))

(def debug-mode?
  false) 

(defn id
  [db]
  (let [id (:id db)]
    (swap! db update :id inc)
    id))

;;;;;;;;;;;;;;;
;;;; Board ;;;;
;;;;;;;;;;;;;;;

(deftype ^:type-only Pile [data]
  :extends (PositionComponent))

(defn ->Pile
  ([] (->Pile {:i 0}))
  ([{:keys [i] :as args}]
   (doto (Pile args)
     (-> .-size (set! card/card-size))
     (-> .-position (set! (Vector2 (+ card/card-gap
                                      (* i
                                         (+ card/card-width card/card-gap)))
                                   (+ card/card-height
                                      (* 2 card/card-gap)))))
     (-> .-debugMode (set! debug-mode?)))))

(defn fan-out-top-cards
  [^WastePile pile]
  (let [{:keys [cards]} (.-data pile)
        qty (count cards)
        fan-offset (Vector2 (* card/card-width 0.2) 0)]
    (doseq [card cards]
      (set! (.-position card) (.-position pile)))
    (cond
      (== qty 2) (.add (.-position ^card/Card (second cards)) fan-offset)
      (>= qty 3) (let [cards (reverse cards)]
                   (.add (.-position ^card/Card (second cards)) fan-offset)
                   (.addScaled (.-position ^card/Card (first cards)) fan-offset 2)))))

(deftype ^:type-only WastePile [^:mutable data]
  :extends (PositionComponent)
  IPile
  (acquire-card
    [this ^card/Card card]
    (assert (-> card .-data :face-up?))
    (let [data (.-data this)]
      (doto card
        (-> .-position (set! (.-position this)))
        (-> .-priority (set! (count (:cards data)))))
      (set! (.-data this) (update data :cards conj card))
      (fan-out-top-cards this))))

(defn ->WastePile
  ([] (->WastePile {}))
  ([{:keys [cards] :as data}]
   (doto (WastePile data)
     (-> .-size (set! card/card-size))
     (-> .-position (set! (Vector2 (+ card/card-width
                                      (* card/card-gap 2))
                                   card/card-gap)))
     (-> .-debugMode (set! debug-mode?)))))


(deftype ^:type-only Camera [data]
  :extends (CameraComponent .world (:world data)))

(defn setup-camera [^CameraComponent camera]
  (doto camera
    (-> .-viewfinder .-visibleGameSize (set! (Vector2 (+ (* card/card-width 7)
                                                         (* card/card-gap 8))
                                                      (+ (* 4 card/card-height)
                                                         (* 3 card/card-gap)))))
    (-> .-viewfinder .-position (set! (Vector2 (+ (* card/card-width 3.5)
                                                  (* card/card-gap 4))
                                               0)))
    (-> .-viewfinder .-anchor (set! Anchor/topCenter))))

(deftype KlondikeGame [db]
  :extends game/FlameGame
  (^:async onLoad [this]
    (let [_ (await (.load (. flame/Flame images) sprite/klondike-sprite-name))
          _ (swap! db assoc :ranks (card/ranks))
          _ (swap! db assoc :suits (card/suits))
          waste-pile (->WastePile {:cards []})
          stock-pile (->StockPile {:cards [] :waste-pile waste-pile})
          foundations (mapv #(->Foundation {:i %}) (range 5))
          piles (mapv #(->Pile {:i %}) (range 8))
          cards (shuffle (card/cards2 {:ranks (:ranks @db) :suits (:suits @db)}))
          _ (doseq [card cards] (acquire-card stock-pile card))
          world (World)
          camera (->Camera {:world world})
          components (concat [stock-pile waste-pile]
                             foundations
                             piles
                             cards)
          _ (await (.addAll ^World world components))
          _ (await (.addAll this [world camera])) 
          ;; Camera has to be set up when using visibleGameSize 
          ;; after the camera has been mounted per the following 
          ;; github issue. Used to work differently in an older version 
          ;; of Flame. https://github.com/flame-engine/flame/pull/2452
          _ (setup-camera camera)])
    nil))

(defn main []
  (fw/WidgetsFlutterBinding.ensureInitialized)
  (let [game (KlondikeGame db)]
    (m/runApp (game/GameWidget .game game))))
