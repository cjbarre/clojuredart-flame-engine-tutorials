(ns acme.main
  (:require ["package:flutter/material.dart" :as m]
            ["package:flutter/widgets.dart" :as fw]
            ["package:flame/flame.dart" :as flame]
            ["package:flame/game.dart" :as game]
            ["package:flame/camera.dart" :as camera :refer [World CameraComponent]] 
            ["package:flame/components.dart" :as components :refer [PositionComponent Anchor]]
            ["package:flame/input.dart" :as input :refer [Vector2]]
            ["dart:ui" :refer [Color Paint PaintingStyle RRect Canvas Rect Offset]]
            [acme.card :as card]
            [acme.sprite :as sprite]
            [acme.protocol :refer [IPile acquire-card]]
            [acme.stock-pile :refer [->StockPile]]
            [acme.foundation-pile :refer [->Foundation]]
            [acme.table-pile :refer [->Pile]]
            [acme.waste-pile :refer [->WastePile]]))

(defonce db
  (atom {:id 0}))

(def debug-mode?
  false) 

(defn id
  [db]
  (let [id (:id db)]
    (swap! db update :id inc)
    id))

;;;;;;;;;;;;;;;
;;;; Board ;;;;
;;;;;;;;;;;;;;;




(deftype ^:type-only Camera [data]
  :extends (CameraComponent .world (:world data)))

(defn setup-camera [^CameraComponent camera]
  (doto camera
    (-> .-viewfinder .-visibleGameSize (set! (Vector2 (+ (* card/card-width 7)
                                                         (* card/card-gap 8))
                                                      (+ (* 4 card/card-height)
                                                         (* 3 card/card-gap)))))
    (-> .-viewfinder .-position (set! (Vector2 (+ (* card/card-width 3.5)
                                                  (* card/card-gap 4))
                                               0)))
    (-> .-viewfinder .-anchor (set! Anchor/topCenter))))

(deftype KlondikeGame [db]
  :extends game/FlameGame
  (^:async onLoad [this]
    (let [_ (await (.load (. flame/Flame images) sprite/klondike-sprite-name))
          _ (swap! db assoc :ranks (card/ranks))
          _ (swap! db assoc :suits (card/suits))
          waste-pile (->WastePile {:cards []})
          stock-pile (->StockPile {:cards [] :waste-pile waste-pile})
          foundations (mapv #(->Foundation {:i % :debug-mode? debug-mode?}) (range 5))
          piles (mapv #(->Pile {:i % :debug-mode? debug-mode?}) (range 8))
          cards (shuffle (card/cards2 {:ranks (:ranks @db) :suits (:suits @db)}))
          _ (doseq [card cards] (acquire-card stock-pile card))
          world (World)
          camera (->Camera {:world world})
          components (concat [stock-pile waste-pile]
                             foundations
                             piles
                             cards)
          _ (await (.addAll ^World world components))
          _ (await (.addAll this [world camera])) 
          ;; Camera has to be set up when using visibleGameSize 
          ;; after the camera has been mounted per the following 
          ;; github issue. Used to work differently in an older version 
          ;; of Flame. https://github.com/flame-engine/flame/pull/2452
          _ (setup-camera camera)])
    nil))

(defn main []
  (fw/WidgetsFlutterBinding.ensureInitialized)
  (let [game (KlondikeGame db)]
    (m/runApp (game/GameWidget .game game))))
